<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_05) on Sun Jun 08 15:40:47 CEST 2008 -->
<TITLE>
wjhk.jupload2.policies
</TITLE>

<META NAME="date" CONTENT="2008-06-08">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="wjhk.jupload2.policies";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Package</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-use.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../wjhk/jupload2/gui/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
&nbsp;<A HREF="../../../wjhk/jupload2/upload/package-summary.html"><B>NEXT PACKAGE</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?wjhk/jupload2/policies/package-summary.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<H2>
Package wjhk.jupload2.policies
</H2>
This package contains the upload policies: they give you hook entry points, to override the default applet behaviour 
with a minimum of java code.
<P>
<B>See:</B>
<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#package_description"><B>Description</B></A>
<P>

<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Interface Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/UploadPolicy.html" title="interface in wjhk.jupload2.policies">UploadPolicy</A></B></TD>
<TD>This package contains upload policies, which allow easy configuration of the
 applet behaviour.</TD>
</TR>
</TABLE>
&nbsp;

<P>

<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Class Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/CoppermineUploadPolicy.html" title="class in wjhk.jupload2.policies">CoppermineUploadPolicy</A></B></TD>
<TD>Specific UploadPolicy for the coppermine picture gallery.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/CustomizedNbFilesPerRequestUploadPolicy.html" title="class in wjhk.jupload2.policies">CustomizedNbFilesPerRequestUploadPolicy</A></B></TD>
<TD><B>Deprecated.</B>&nbsp;<I>This class is of no use, as it actually behaves exactly as the
             <A HREF="../../../wjhk/jupload2/policies/DefaultUploadPolicy.html" title="class in wjhk.jupload2.policies"><CODE>DefaultUploadPolicy</CODE></A>.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/DefaultUploadPolicy.html" title="class in wjhk.jupload2.policies">DefaultUploadPolicy</A></B></TD>
<TD>This class implements all <A HREF="../../../wjhk/jupload2/policies/UploadPolicy.html" title="interface in wjhk.jupload2.policies"><CODE>UploadPolicy</CODE></A>
 methods.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/FileByFileUploadPolicy.html" title="class in wjhk.jupload2.policies">FileByFileUploadPolicy</A></B></TD>
<TD><B>Deprecated.</B>&nbsp;<I>You can use the applet, without the uploadPolicy applet
             parameter, and put the nbFilesPerRequest to 1.</I></TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/FilesTogetherUploadPolicy.html" title="class in wjhk.jupload2.policies">FilesTogetherUploadPolicy</A></B></TD>
<TD>Upload policy that is a simple box.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/PictureUploadPolicy.html" title="class in wjhk.jupload2.policies">PictureUploadPolicy</A></B></TD>
<TD>This class add handling of pictures to upload.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD WIDTH="15%"><B><A HREF="../../../wjhk/jupload2/policies/UploadPolicyFactory.html" title="class in wjhk.jupload2.policies">UploadPolicyFactory</A></B></TD>
<TD>This class is used to control creation of the uploadPolicy instance,
 according to applet parameters (or System properties).</TD>
</TR>
</TABLE>
&nbsp;

<P>
<A NAME="package_description"><!-- --></A><H2>
Package wjhk.jupload2.policies Description
</H2>

<P>
<P>This package contains the upload policies: they give you hook entry points, to override the default applet behaviour 
with a minimum of java code.</P>

This pages describes how to create a new upload policy, to adapt the applet to your needs, without interfering
with the core applet, that is: with having compatibility with future JUpload versions. Here are other links on this subject:
<DIR>
<LI> See <A HREF="../../../wjhk/jupload2/policies/UploadPolicy.html" title="interface in wjhk.jupload2.policies"><CODE>UploadPolicy</CODE></A> for the list of applet parameters</LI>
<LI><a href="../../../howto-customization.html">howto customize</a> for a presentation of
the main ways to adapt the applet to your needs.
</DIR>


<H3>Creating a new upload policy: introduction</H3>

Creating a new upload policy, allows you to change the applet behaviour, and still use the core applet function. This 
insures you that your development will remain compatible with next applet versions.
<P>You'll find on this page a description of the <CODE>UploadPolicy</CODE> methods, grouped by categories.</P>
<P><B>Note:</B> Creating a new upload policy is mandatory, if you want to manage some other kind of <CODE>FileData</CODE>. 
You can then add some kind of 'before upload check', or have a specific applet behaviour, for instance be able to hear 
sound file before upload.</P>

<h3>Presentation</h3>

<p>To create a new upload policy, you need to create a new java
class: the easiest way is to inherit from <CODE>DefaultUploadPolicy</CODE>. 
You can then override methods of the UploadPolicy interface that you need to update for your needs.</p>
<p>This kind of customization will be compatible within next JUpload
applet release. If you need other hooks (method within the UploadPolicy
interface, to allow other customizations), please let me know by posting a message
on the sourceforge jupload forums (open discussions for instance), or
post a new Feature Request in the jupload sourceforge project page. For instance, some attributes and methods from 
DefaultUploadPolicy are protected (not private), so that you can use them in your own upload policies.</p>
<p>Here is a sample description of the customization that you can do by
using the creating a new policy, using the UploadPolicy interface. All methods are described in
the next section of this page.</p>
<ul>
    <li>Control files management:
    <ul>
        <li>Authorization (or not) to add a file to the list of
        files to upload, see UploadPolicy#createFileData(File, File). This
        allows the policy to validate files, before adding them to the
        list of files that must be displayed. The
        <CODE>UploadPolicy#createFileData(File)</CODE> checks that the added
        files are valid pictures.</li>
        <li>File preparation before upload (for instance to resize
        a picture, or encode a text file to a specific format)</li>
    </ul>
    </li>
    <li>Display other buttons on the applet (or remove the default
    buttons), see UploadPolicy.createTopPanel(JButton, JButton, JButton,
    JPanel)</li>
    <li>Specific behaviour, on file selection. The
    wjhk.jupload2.policies.PictureUploadPolicy allows picture
    management. The UploadPolicy.onSelectFile(FileData) method is called
    when the user selects a file in the list. This allow the policy to
    do any action about this file. The
    PictureUploadPolicy.onSelectFile(FileData) displays a preview
    pictures on the top part of the applet.</li>
</ul>

<h3>Note: UploadPolicyFactory</h3>

<p>The JuploadApplet asks the UploadPolicyFactory to create
(instanciate) the needed UploadPolicy. That is:</p>
<dir>
    <li>During initialization of the applet, the
    UploadPolicyFactory.getUploadPolicy() method is called. This method
    checks the <i>uploadPolicy</i> parameter. If this uploadPolicy is
    unknown or not set, the DefaultUploadPolicy is used. If a specific
    uploadPolicy is found, it can of course read specific parameters
    from the APPLET tag.</li>
    <li>Then, UploadPolicyFactory.getUploadPolicy() creates the
    class implementing the UploadPolicy factory, and returns the
    reference to this class.</li>
    <li>The upload policy can not be changed while the applet is
    running.</li>
</dir>

<h3>Creation of a new UploadPolicy: detailed steps</h3>
<p>To create a new UploadPolicy, you'll need to:</p>
<ul>
    <li><b>Create a new class, implementing the UploadPolicy
    interface</b>. The easiest way is to inherit from an existing
    UploadPolicy. This insure that your new policy will be compatible
    with next JUpload releases. <br>
    <i>Note: The upload policies are created by UploadPolicyFactory.
    Their constructor must:
    <ul>
        <li>Be public, to be called by this class,</li>
        <li>Have one parameter: the current JUploadApplet.</li>
    </ul>
    </i></li>
    <li><b>Override some UploadPolicy methods</b>, to have your
    specific behaviour.</li>
    <li>Don't change any other java code, so that your upload
    policy will work with next JUpload releases. <br>
    <i>Note: if you need another 'hook', to be able to add specific
    customization, please add a new Feature Request in sourceforge, I'll receive a notification mail.</i></li>
</ul>

        
<H3>Methods to control file management</H3>

<H4>FileData createFileData(File file, File root) throws JUploadExceptionStopAddingFiles</H4>
<P>This methods creates a new <CODE>FileData</CODE> object. It returns null is no file data was created, for instance
if this file didn't check some specific validation checks. <BR>
<B>Note:</B> use this method to use any FileData specific to your needs. See <CODE>PictureUploadPolicy</CODE> for a sample
of this.
</P>

<H4>void afterFileDropped(DropTargetDropEvent dropEvent)</H4>
<P>Specific reaction of the applet, when file are dropped onto it.</P>


<H3>Methods to control the applet GUI (display, behaviour)</H3>

This methods are used to control what the <CODE>JUploadFileChooser</CODE> has to do.

<H4>JPanel createTopPanel(JButton browse, JButton remove, JButton removeAll, JUploadPanel mainPanel)</H4>
<P>Allows the applet to change the way the top part of the applet is displayed, that is: the place where the 
Choose, remove, remove all buttons are. <B>If you override this method, you must use the given button if you want
these functionalities to work</B>. If you don't put the browse button, for instance, the user won't be able to 
display a file chooser, unless you manage it yourself. See <CODE>PictureUploadPolicy</CODE>, for a way to use the 
standard buttons, and add specific ones.</P>


<H4>void addComponentsToJUploadPanel(JUploadPanel jUploadPanel)</H4>
<P>Extension of the createTopPanel() idea. You can place any component of JUpload at any place ... or at no place.
<B>If you override this method, you'll have to call the <CODE>JUploadPanel</CODE> getter to get core applet objects.</B> 
These are: 
<DIR>
<LI>Standard buttons: browseButton, removeButton, removeAllButton, stopButton, uploadButton. 
<LI>Drag'n drop listener: dndListener, to manage files dropped on the applet
<LI>The log output: jLogWindowPane
<LI>The progress bar, which indicated the upload progress (from 0 to 100%): progressBar.
<LI>The status label, where upload speed is indicated:
<LI>The file panel, that contains the list of files to upload: filePanel.
</DIR>
</P>

<H4>JPanel createProgressPanel(JProgressBar progressBar, JButton uploadButton, JButton stopButton, JPanel mainPanel)</H4>
<P>You probably won't have to override this method. Note that this method allows you to not
display the stop and upload buttons.    </P>

<H4>JPanel createStatusBar(JLabel statusContent, JPanel mainPanel)</H4>
<P>This method should not be used any more. Use the showStatusBar applet parameter instead.</P>

<H4>void onFileSelected(FileData fileData)</H4>
<P>Reaction of the applet, when a file is selected in the file list. For instance, <CODE>PictureUploadPolicy</CODE> 
displays the selected picture in the preview component.</P>

<H4>void onFileDoubleClicked(FileData fileData)</H4>
<P>Reaction of the applet, when a file is double clicked. For instance, <CODE>PictureUploadPolicy</CODE> opens a dialog
box, that contain a full screen display of the current picture. </P>


<H3>Methods to control the file chooser</H3>

This methods are used to control what the <CODE>JUploadFileChooser</CODE> has to do.

<H4>JUploadFileChooser createFileChooser()</H4>
<P>Allows the applet to change user another JFileChooser. Your specific file chooser should inherit 
from JUploadFileChooser</P>

<H4>boolean fileFilterAccept(File file)</H4>
<P>Called by the <CODE>JUploadFileFilter</CODE>. This method contains the actual response to the {
<P>

<P>
<DL>
</DL>
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Package</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-use.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../wjhk/jupload2/gui/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
&nbsp;<A HREF="../../../wjhk/jupload2/upload/package-summary.html"><B>NEXT PACKAGE</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?wjhk/jupload2/policies/package-summary.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
